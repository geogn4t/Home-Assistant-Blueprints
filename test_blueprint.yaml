blueprint:
  name: Scheduled Light On with Weather Forecast
  description: >
    Turns on a light with a color based on the forecasted high temp at a specified time.
    Sends a notification with the forecasted temperature and selected light color.
  domain: automation
  input:
    trigger_time:
      name: Trigger Time
      description: Time to run this automation
      default: "08:00:00"
      selector:
        time:
    light_entity:
      name: Light Entity
      description: The light to turn on
      selector:
        entity:
          domain: light
    weather_entity:
      name: Weather Entity
      description: Weather entity that supports forecast
      selector:
        entity:
          domain: weather
    forecast_day:
      name: Forecast Day
      description: 0 = today, 1 = tomorrow
      default: 0
      selector:
        number:
          min: 0
          max: 1
          mode: slider
          step: 1
    notify_device:
      name: Notification Device
      description: Where to send a notification
      selector:
        entity:
          domain: notify

trigger:
  - platform: time
    at: !input trigger_time

variables:
  current_time: "{{ now().strftime('%I:%M %p') }}"
  weather_entity: !input weather_entity
  forecast_day: !input forecast_day
  light_entity: !input light_entity
  notify_device: !input notify_device

action:
  - service: weather.get_forecasts
    data:
      type: daily
    target:
      entity_id: "{{ weather_entity }}"
    response_variable: forecast_data

  - variables:
      temp_f: >
        {{ forecast_data[weather_entity].forecast[forecast_day].temperature | float(0) }}
      rgb_color: >
        {% if temp_f < 0 %}
          [128, 0, 128]
        {% elif temp_f < 10 %}
          [75, 0, 130]
        {% elif temp_f < 20 %}
          [0, 0, 255]
        {% elif temp_f < 30 %}
          [0, 128, 255]
        {% elif temp_f < 40 %}
          [0, 255, 255]
        {% elif temp_f < 50 %}
          [0, 255, 128]
        {% elif temp_f < 60 %}
          [0, 255, 0]
        {% elif temp_f < 70 %}
          [255, 255, 0]
        {% elif temp_f < 80 %}
          [255, 165, 0]
        {% elif temp_f < 90 %}
          [255, 69, 0]
        {% elif temp_f < 100 %}
          [255, 0, 0]
        {% else %}
          [139, 0, 0]
        {% endif %}

  - service: light.turn_on
    target:
      entity_id: "{{ light_entity }}"
    data:
      rgb_color: "{{ rgb_color }}"

  - service: "{{ notify_device }}"
    data:
      message: "🌡️ Forecast high: {{ temp_f }}°F — Light color set to {{ rgb_color }} at {{ current_time }}"

mode: single
